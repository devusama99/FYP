{"ast":null,"code":"import { useRef, useEffect } from 'react';\n/**\n * Creates DOM element to be used as React root.\n */\n\nfunction createRootElement(id) {\n  var rootContainer = document.createElement('div');\n  rootContainer.setAttribute('id', id);\n  return rootContainer;\n}\n/**\n * Appends element as last child of body.\n */\n\n\nfunction addRootElement(rootElem) {\n  document.body.append(rootElem);\n}\n/**\n * Hook to create a React Portal.\n * Automatically handles creating and tearing-down the root elements (no SRR\n * makes this trivial), so there is no need to ensure the parent target already\n * exists.\n * @example\n * const target = usePortal(id, [id]);\n * return createPortal(children, target);\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\n * @returns {HTMLElement} The DOM node to use as the Portal target.\n */\n\n\nfunction usePortal(id) {\n  var rootElemRef = useRef(null);\n  useEffect(function () {\n    // Look for existing target dom element to append to\n    var existingParent = document.querySelector(\"#\".concat(id)); // Parent is either a new root or the existing dom element\n\n    var parentElem = existingParent || createRootElement(id); // If there is no existing DOM element, add a new one.\n\n    if (!existingParent) {\n      addRootElement(parentElem);\n    } // Add the detached element to the parent\n\n\n    if (rootElemRef.current) {\n      parentElem.append(rootElemRef.current);\n    }\n\n    return function removeElement() {\n      if (rootElemRef.current) {\n        rootElemRef.current.remove();\n      }\n\n      if (parentElem.childNodes.length === -1) {\n        parentElem.remove();\n      }\n    };\n  }, []);\n  /**\n   * It's important we evaluate this lazily:\n   * - We need first render to contain the DOM element, so it shouldn't happen\n   *   in useEffect. We would normally put this in the constructor().\n   * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\n   *   since this will run every single render (that's a lot).\n   * - We want the ref to consistently point to the same DOM element and only\n   *   ever run once.\n   * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n   */\n\n  function getRootElem() {\n    if (!rootElemRef.current) {\n      rootElemRef.current = document.createElement('div');\n    }\n\n    return rootElemRef.current;\n  }\n\n  return getRootElem();\n}\n\nexport default usePortal;\nexport { usePortal };","map":{"version":3,"sources":["/Users/devusama/Work/FYP_FrontEnd/node_modules/react-filerobot-image-editor/node_modules/@scaleflex/ui/hooks/use-portal.js"],"names":["useRef","useEffect","createRootElement","id","rootContainer","document","createElement","setAttribute","addRootElement","rootElem","body","append","usePortal","rootElemRef","existingParent","querySelector","concat","parentElem","current","removeElement","remove","childNodes","length","getRootElem"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7B,MAAIC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAApB;AACAF,EAAAA,aAAa,CAACG,YAAd,CAA2B,IAA3B,EAAiCJ,EAAjC;AACA,SAAOC,aAAP;AACD;AACD;AACA;AACA;;;AAGA,SAASI,cAAT,CAAwBC,QAAxB,EAAkC;AAChCJ,EAAAA,QAAQ,CAACK,IAAT,CAAcC,MAAd,CAAqBF,QAArB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASG,SAAT,CAAmBT,EAAnB,EAAuB;AACrB,MAAIU,WAAW,GAAGb,MAAM,CAAC,IAAD,CAAxB;AACAC,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,QAAIa,cAAc,GAAGT,QAAQ,CAACU,aAAT,CAAuB,IAAIC,MAAJ,CAAWb,EAAX,CAAvB,CAArB,CAFoB,CAEyC;;AAE7D,QAAIc,UAAU,GAAGH,cAAc,IAAIZ,iBAAiB,CAACC,EAAD,CAApD,CAJoB,CAIsC;;AAE1D,QAAI,CAACW,cAAL,EAAqB;AACnBN,MAAAA,cAAc,CAACS,UAAD,CAAd;AACD,KARmB,CAQlB;;;AAGF,QAAIJ,WAAW,CAACK,OAAhB,EAAyB;AACvBD,MAAAA,UAAU,CAACN,MAAX,CAAkBE,WAAW,CAACK,OAA9B;AACD;;AAED,WAAO,SAASC,aAAT,GAAyB;AAC9B,UAAIN,WAAW,CAACK,OAAhB,EAAyB;AACvBL,QAAAA,WAAW,CAACK,OAAZ,CAAoBE,MAApB;AACD;;AAED,UAAIH,UAAU,CAACI,UAAX,CAAsBC,MAAtB,KAAiC,CAAC,CAAtC,EAAyC;AACvCL,QAAAA,UAAU,CAACG,MAAX;AACD;AACF,KARD;AASD,GAxBQ,EAwBN,EAxBM,CAAT;AAyBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,WAASG,WAAT,GAAuB;AACrB,QAAI,CAACV,WAAW,CAACK,OAAjB,EAA0B;AACxBL,MAAAA,WAAW,CAACK,OAAZ,GAAsBb,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAtB;AACD;;AAED,WAAOO,WAAW,CAACK,OAAnB;AACD;;AAED,SAAOK,WAAW,EAAlB;AACD;;AAED,eAAeX,SAAf;AACA,SAASA,SAAT","sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Creates DOM element to be used as React root.\n */\nfunction createRootElement(id) {\n  var rootContainer = document.createElement('div');\n  rootContainer.setAttribute('id', id);\n  return rootContainer;\n}\n/**\n * Appends element as last child of body.\n */\n\n\nfunction addRootElement(rootElem) {\n  document.body.append(rootElem);\n}\n/**\n * Hook to create a React Portal.\n * Automatically handles creating and tearing-down the root elements (no SRR\n * makes this trivial), so there is no need to ensure the parent target already\n * exists.\n * @example\n * const target = usePortal(id, [id]);\n * return createPortal(children, target);\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\n * @returns {HTMLElement} The DOM node to use as the Portal target.\n */\n\n\nfunction usePortal(id) {\n  var rootElemRef = useRef(null);\n  useEffect(function () {\n    // Look for existing target dom element to append to\n    var existingParent = document.querySelector(\"#\".concat(id)); // Parent is either a new root or the existing dom element\n\n    var parentElem = existingParent || createRootElement(id); // If there is no existing DOM element, add a new one.\n\n    if (!existingParent) {\n      addRootElement(parentElem);\n    } // Add the detached element to the parent\n\n\n    if (rootElemRef.current) {\n      parentElem.append(rootElemRef.current);\n    }\n\n    return function removeElement() {\n      if (rootElemRef.current) {\n        rootElemRef.current.remove();\n      }\n\n      if (parentElem.childNodes.length === -1) {\n        parentElem.remove();\n      }\n    };\n  }, []);\n  /**\n   * It's important we evaluate this lazily:\n   * - We need first render to contain the DOM element, so it shouldn't happen\n   *   in useEffect. We would normally put this in the constructor().\n   * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\n   *   since this will run every single render (that's a lot).\n   * - We want the ref to consistently point to the same DOM element and only\n   *   ever run once.\n   * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n   */\n\n  function getRootElem() {\n    if (!rootElemRef.current) {\n      rootElemRef.current = document.createElement('div');\n    }\n\n    return rootElemRef.current;\n  }\n\n  return getRootElem();\n}\n\nexport default usePortal;\nexport { usePortal };"]},"metadata":{},"sourceType":"module"}