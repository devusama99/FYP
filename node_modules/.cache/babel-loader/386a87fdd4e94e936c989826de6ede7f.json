{"ast":null,"code":"import React, { memo } from \"react\";\nimport ThemeProvider from \"@scaleflex/ui/theme\";\nimport App from \"../App\";\nimport { AppProvider } from \"../../context\";\nimport defaultConfig from \"../../context/defaultConfig\";\nimport deepMerge from \"../../utils/deepMerge\";\nimport { FontsFaces, IconsColor, OverrideDefaultStyles } from \"./globalStyles\";\n\nvar AssemblyPoint = function (a) {\n  var b = a.img,\n      c = a.source,\n      d = a.useCloudimage,\n      e = a.cloudimage;\n  if (b) throw new Error(\"`img` is renamed to `source` please consider renaming it from your configurations.\");\n  if (!c || \"string\" != typeof c && !(c instanceof HTMLImageElement)) throw new Error(\"`source` property is required either a string of image url or a HTMLImageElement for the image that will be edited.\");\n\n  if (d) {\n    var f, g;\n    if (null !== e && void 0 !== e && null !== (f = e.imageSealing) && void 0 !== f && f.enable && !(null !== e && void 0 !== e && null !== (g = e.imageSealing) && void 0 !== g && g.salt)) throw new Error(\"`salt` property of imageSealing object is required in cloudimage mode as long as `imageSealing` is enabled.\");\n  }\n\n  var h = deepMerge(defaultConfig, a);\n  return React.createElement(React.StrictMode, null, React.createElement(ThemeProvider, {\n    theme: h.theme\n  }, React.createElement(FontsFaces, null), React.createElement(IconsColor, null), React.createElement(OverrideDefaultStyles, null), React.createElement(AppProvider, {\n    config: h\n  }, React.createElement(App, null))));\n};\n\nAssemblyPoint.defaultProps = {\n  useCloudimage: !1,\n  cloudimage: {},\n  img: void 0\n};\nexport default memo(AssemblyPoint);","map":{"version":3,"sources":["/Users/devusama/Work/FYP_FrontEnd/node_modules/react-filerobot-image-editor/lib/components/AssemblyPoint/index.js"],"names":["React","memo","ThemeProvider","App","AppProvider","defaultConfig","deepMerge","FontsFaces","IconsColor","OverrideDefaultStyles","AssemblyPoint","a","b","img","c","source","d","useCloudimage","e","cloudimage","Error","HTMLImageElement","f","g","imageSealing","enable","salt","h","createElement","StrictMode","theme","config","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,IAAcC,IAAd,QAAuB,OAAvB;AAA+B,OAAOC,aAAP,MAAyB,qBAAzB;AAA+C,OAAOC,GAAP,MAAe,QAAf;AAAwB,SAAOC,WAAP,QAAuB,eAAvB;AAAuC,OAAOC,aAAP,MAAyB,6BAAzB;AAAuD,OAAOC,SAAP,MAAqB,uBAArB;AAA6C,SAAOC,UAAP,EAAkBC,UAAlB,EAA6BC,qBAA7B,QAAuD,gBAAvD;;AAAwE,IAAIC,aAAa,GAAC,UAASC,CAAT,EAAW;AAAC,MAAIC,CAAC,GAACD,CAAC,CAACE,GAAR;AAAA,MAAYC,CAAC,GAACH,CAAC,CAACI,MAAhB;AAAA,MAAuBC,CAAC,GAACL,CAAC,CAACM,aAA3B;AAAA,MAAyCC,CAAC,GAACP,CAAC,CAACQ,UAA7C;AAAwD,MAAGP,CAAH,EAAK,MAAM,IAAIQ,KAAJ,CAAU,oFAAV,CAAN;AAAsG,MAAG,CAACN,CAAD,IAAI,YAAU,OAAOA,CAAjB,IAAoB,EAAEA,CAAC,YAAYO,gBAAf,CAA3B,EAA4D,MAAM,IAAID,KAAJ,CAAU,qHAAV,CAAN;;AAAuI,MAAGJ,CAAH,EAAK;AAAC,QAAIM,CAAJ,EAAMC,CAAN;AAAQ,QAAG,SAAOL,CAAP,IAAU,KAAK,CAAL,KAASA,CAAnB,IAAsB,UAAQI,CAAC,GAACJ,CAAC,CAACM,YAAZ,CAAtB,IAAiD,KAAK,CAAL,KAASF,CAA1D,IAA6DA,CAAC,CAACG,MAA/D,IAAuE,EAAE,SAAOP,CAAP,IAAU,KAAK,CAAL,KAASA,CAAnB,IAAsB,UAAQK,CAAC,GAACL,CAAC,CAACM,YAAZ,CAAtB,IAAiD,KAAK,CAAL,KAASD,CAA1D,IAA6DA,CAAC,CAACG,IAAjE,CAA1E,EAAiJ,MAAM,IAAIN,KAAJ,CAAU,6GAAV,CAAN;AAA+H;;AAAA,MAAIO,CAAC,GAACrB,SAAS,CAACD,aAAD,EAAeM,CAAf,CAAf;AAAiC,SAAOX,KAAK,CAAC4B,aAAN,CAAoB5B,KAAK,CAAC6B,UAA1B,EAAqC,IAArC,EAA0C7B,KAAK,CAAC4B,aAAN,CAAoB1B,aAApB,EAAkC;AAAC4B,IAAAA,KAAK,EAACH,CAAC,CAACG;AAAT,GAAlC,EAAkD9B,KAAK,CAAC4B,aAAN,CAAoBrB,UAApB,EAA+B,IAA/B,CAAlD,EAAuFP,KAAK,CAAC4B,aAAN,CAAoBpB,UAApB,EAA+B,IAA/B,CAAvF,EAA4HR,KAAK,CAAC4B,aAAN,CAAoBnB,qBAApB,EAA0C,IAA1C,CAA5H,EAA4KT,KAAK,CAAC4B,aAAN,CAAoBxB,WAApB,EAAgC;AAAC2B,IAAAA,MAAM,EAACJ;AAAR,GAAhC,EAA2C3B,KAAK,CAAC4B,aAAN,CAAoBzB,GAApB,EAAwB,IAAxB,CAA3C,CAA5K,CAA1C,CAAP;AAAyS,CAA5+B;;AAA6+BO,aAAa,CAACsB,YAAd,GAA2B;AAACf,EAAAA,aAAa,EAAC,CAAC,CAAhB;AAAkBE,EAAAA,UAAU,EAAC,EAA7B;AAAgCN,EAAAA,GAAG,EAAC,KAAK;AAAzC,CAA3B;AAAuE,eAAeZ,IAAI,CAACS,aAAD,CAAnB","sourcesContent":["import React,{memo}from\"react\";import ThemeProvider from\"@scaleflex/ui/theme\";import App from\"../App\";import{AppProvider}from\"../../context\";import defaultConfig from\"../../context/defaultConfig\";import deepMerge from\"../../utils/deepMerge\";import{FontsFaces,IconsColor,OverrideDefaultStyles}from\"./globalStyles\";var AssemblyPoint=function(a){var b=a.img,c=a.source,d=a.useCloudimage,e=a.cloudimage;if(b)throw new Error(\"`img` is renamed to `source` please consider renaming it from your configurations.\");if(!c||\"string\"!=typeof c&&!(c instanceof HTMLImageElement))throw new Error(\"`source` property is required either a string of image url or a HTMLImageElement for the image that will be edited.\");if(d){var f,g;if(null!==e&&void 0!==e&&null!==(f=e.imageSealing)&&void 0!==f&&f.enable&&!(null!==e&&void 0!==e&&null!==(g=e.imageSealing)&&void 0!==g&&g.salt))throw new Error(\"`salt` property of imageSealing object is required in cloudimage mode as long as `imageSealing` is enabled.\")}var h=deepMerge(defaultConfig,a);return React.createElement(React.StrictMode,null,React.createElement(ThemeProvider,{theme:h.theme},React.createElement(FontsFaces,null),React.createElement(IconsColor,null),React.createElement(OverrideDefaultStyles,null),React.createElement(AppProvider,{config:h},React.createElement(App,null))))};AssemblyPoint.defaultProps={useCloudimage:!1,cloudimage:{},img:void 0};export default memo(AssemblyPoint);"]},"metadata":{},"sourceType":"module"}