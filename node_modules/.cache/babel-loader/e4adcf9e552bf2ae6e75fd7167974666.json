{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { Crop as CropIcon } from \"@scaleflex/icons/crop\";\nimport { useStore } from \"../../../hooks\";\nimport ToolsBarItemButton from \"../../ToolsBar/ToolsBarItemButton\";\nimport { TOOLS_IDS } from \"../../../utils/constants\";\nimport { StyledToolsBarItemButtonLabel } from \"../../ToolsBar/ToolsBar.styled\";\nimport CropPresetsOption from \"./CropPresetsOption\";\n\nvar Crop = function (a) {\n  var b = a.selectTool,\n      c = a.isSelected,\n      d = useStore(),\n      e = d.config,\n      f = d.t,\n      g = useState(),\n      h = _slicedToArray(g, 2),\n      i = h[0],\n      j = h[1];\n\n  return React.createElement(ToolsBarItemButton, {\n    className: \"FIE_crop-tool\",\n    id: TOOLS_IDS.CROP,\n    Icon: CropIcon,\n    onClick: function selectToolAndShowPresets(a, c) {\n      b(a), j(c.currentTarget);\n    },\n    isSelected: c\n  }, e[TOOLS_IDS.CROP].noPresets ? React.createElement(StyledToolsBarItemButtonLabel, {\n    className: \"FIE_crop-tool-label\"\n  }, f(\"cropTool\")) : React.createElement(CropPresetsOption, {\n    anchorEl: i,\n    onClose: function closeCropPresets() {\n      j(null);\n    }\n  }));\n};\n\nCrop.defaultProps = {\n  isSelected: !1\n};\nexport default Crop;","map":{"version":3,"sources":["/Users/devusama/Work/FYP_FrontEnd/node_modules/react-filerobot-image-editor/lib/components/tools/Crop/Crop.js"],"names":["_slicedToArray","React","useState","Crop","CropIcon","useStore","ToolsBarItemButton","TOOLS_IDS","StyledToolsBarItemButtonLabel","CropPresetsOption","a","b","selectTool","c","isSelected","d","e","config","f","t","g","h","i","j","createElement","className","id","CROP","Icon","onClick","selectToolAndShowPresets","currentTarget","noPresets","anchorEl","onClose","closeCropPresets","defaultProps"],"mappings":"AAAA,OAAOA,cAAP,MAA0B,sCAA1B;AAAiE,OAAOC,KAAP,IAAcC,QAAd,QAA2B,OAA3B;AAAmC,SAAOC,IAAI,IAAIC,QAAf,QAA4B,uBAA5B;AAAoD,SAAOC,QAAP,QAAoB,gBAApB;AAAqC,OAAOC,kBAAP,MAA8B,mCAA9B;AAAkE,SAAOC,SAAP,QAAqB,0BAArB;AAAgD,SAAOC,6BAAP,QAAyC,gCAAzC;AAA0E,OAAOC,iBAAP,MAA6B,qBAA7B;;AAAmD,IAAIN,IAAI,GAAC,UAASO,CAAT,EAAW;AAAC,MAAIC,CAAC,GAACD,CAAC,CAACE,UAAR;AAAA,MAAmBC,CAAC,GAACH,CAAC,CAACI,UAAvB;AAAA,MAAkCC,CAAC,GAACV,QAAQ,EAA5C;AAAA,MAA+CW,CAAC,GAACD,CAAC,CAACE,MAAnD;AAAA,MAA0DC,CAAC,GAACH,CAAC,CAACI,CAA9D;AAAA,MAAgEC,CAAC,GAAClB,QAAQ,EAA1E;AAAA,MAA6EmB,CAAC,GAACrB,cAAc,CAACoB,CAAD,EAAG,CAAH,CAA7F;AAAA,MAAmGE,CAAC,GAACD,CAAC,CAAC,CAAD,CAAtG;AAAA,MAA0GE,CAAC,GAACF,CAAC,CAAC,CAAD,CAA7G;;AAAiH,SAAOpB,KAAK,CAACuB,aAAN,CAAoBlB,kBAApB,EAAuC;AAACmB,IAAAA,SAAS,EAAC,eAAX;AAA2BC,IAAAA,EAAE,EAACnB,SAAS,CAACoB,IAAxC;AAA6CC,IAAAA,IAAI,EAACxB,QAAlD;AAA2DyB,IAAAA,OAAO,EAAC,SAASC,wBAAT,CAAkCpB,CAAlC,EAAoCG,CAApC,EAAsC;AAACF,MAAAA,CAAC,CAACD,CAAD,CAAD,EAAKa,CAAC,CAACV,CAAC,CAACkB,aAAH,CAAN;AAAwB,KAAlI;AAAmIjB,IAAAA,UAAU,EAACD;AAA9I,GAAvC,EAAwLG,CAAC,CAACT,SAAS,CAACoB,IAAX,CAAD,CAAkBK,SAAlB,GAA4B/B,KAAK,CAACuB,aAAN,CAAoBhB,6BAApB,EAAkD;AAACiB,IAAAA,SAAS,EAAC;AAAX,GAAlD,EAAoFP,CAAC,CAAC,UAAD,CAArF,CAA5B,GAA+HjB,KAAK,CAACuB,aAAN,CAAoBf,iBAApB,EAAsC;AAACwB,IAAAA,QAAQ,EAACX,CAAV;AAAYY,IAAAA,OAAO,EAAC,SAASC,gBAAT,GAA2B;AAACZ,MAAAA,CAAC,CAAC,IAAD,CAAD;AAAQ;AAAxD,GAAtC,CAAvT,CAAP;AAAga,CAAtiB;;AAAuiBpB,IAAI,CAACiC,YAAL,GAAkB;AAACtB,EAAAA,UAAU,EAAC,CAAC;AAAb,CAAlB;AAAkC,eAAeX,IAAf","sourcesContent":["import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from\"react\";import{Crop as CropIcon}from\"@scaleflex/icons/crop\";import{useStore}from\"../../../hooks\";import ToolsBarItemButton from\"../../ToolsBar/ToolsBarItemButton\";import{TOOLS_IDS}from\"../../../utils/constants\";import{StyledToolsBarItemButtonLabel}from\"../../ToolsBar/ToolsBar.styled\";import CropPresetsOption from\"./CropPresetsOption\";var Crop=function(a){var b=a.selectTool,c=a.isSelected,d=useStore(),e=d.config,f=d.t,g=useState(),h=_slicedToArray(g,2),i=h[0],j=h[1];return React.createElement(ToolsBarItemButton,{className:\"FIE_crop-tool\",id:TOOLS_IDS.CROP,Icon:CropIcon,onClick:function selectToolAndShowPresets(a,c){b(a),j(c.currentTarget)},isSelected:c},e[TOOLS_IDS.CROP].noPresets?React.createElement(StyledToolsBarItemButtonLabel,{className:\"FIE_crop-tool-label\"},f(\"cropTool\")):React.createElement(CropPresetsOption,{anchorEl:i,onClose:function closeCropPresets(){j(null)}}))};Crop.defaultProps={isSelected:!1};export default Crop;"]},"metadata":{},"sourceType":"module"}